Licensed Materials - Property of HCL
(c) Copyright HCL Technologies Ltd.  2020. All Rights Reserved.
US Government Users Restricted Rights - Use, duplication or disclosure
restricted by GSA ADP Schedule Contract with HCL Technologies.

Introduction
------------

Project Layout
--------------

Project Tools
-------------
Git

Known issues:
ISSUE: <Issue description>
CAUSE: <Root cause description>
FIX: <Workaround or fix>

------------------------------------------------------------------------------------
js-test-driver: Unit testing framework

Known issues:
ISSUE: Stack Overflow errors in the test browser.
CAUSE: This occurs when using AsyncTestCase but not making use of queue.call()
For some undetermined reason js-test-driver continues to pile on the tests until
the async. queues call method is exercised.
FIX: If you are not writing an asynchronous test then use the regular
TestCase instead of AsyncTestCase.

ISSUE: Error executing tests. The trace looks like the following:
     [exec] while scanning for the next token
     [exec] found character     (9 that cannot start any token
     [exec] org.jvyaml.ScannerException: ScannerException while scanning for the
 next token we had this found character         (9 that cannot start any token
     [exec]     at org.jvyaml.ScannerImpl.fetchMoreTokens(ScannerImpl.java:359)
CAUSE: JSTestDriver detected a tab character in the test configuration.
FIX: Use spaces instead of tab characters in the test configuration files.

ISSUE: Error executing tests. The trace looks like the following:
     [exec] setting runnermode QUIET
     [exec] Failures during test run.Unexpected Runner Condition: Failures during test run.
     [exec] Caused by:
     [exec] com.google.jstestdriver.FailureException: Browser is not available
CAUSE: JSTestDriver server was started and aborted previously (or not cleaned up) 
FIX: Kill stale JSTestDriver (java process)
 
-----------------------------------------------------------------------------------
JDK: Java Development Kit

Known issues:
ISSUE: Build fails because could not execute process "jps"
CAUSE: This occurs when the installed Java software (JRE or IBM Java) does not have
the JVM process status tool (jps.exe)
FIX: Install the Java JDK which has this tool. Note that per official documentation,
this tool is not supported and may be removed from future versions of the JDK.

-----------------------------------------------------------------------------------
webdriver: Automated functional testing framework

Known issues:
ISSUE: IE webdriver starts up but does not display the test page. Instead you see:
"This is the initial start page for the WebDriver server."
CAUSE: This occurs for multiple reasons when the webdriver encounters an exception
during startup.
FIX: Check that IE Zoom level is set to 100%.

ISSUE: Firefox webdriver starts up but displays a blank page.
CAUSE: This occurs for multiple reasons when the webdriver encounters an exception
during startup.
FIX: Check the installed Firefox is not on the ESR channel. Check if version of
Firefox is supported by the webdriver version. 

-----------------------------------------------------------------------------------
PSTools:
Required for killing stale browser and java processes created by the unit test framework.

-----------------------------------------------------------------------------------
Setup and install RTC BuildSystem

It can be found at Dev3rdPartyTools/RTC_4_0_6/Build System Toolkit. Get and place on your it on your PATH.

You will need to create an encrypted password file that build will need.

You can create an encrypted password file that you can use with the Jazzï¿½ build toolkit Ant tasks or to start the Jazz Build Engine.
To create an encrypted password file:
1.- From a command line, navigate to installdir/buildsystem/buildengine/eclipse, where installdir is the Build System Toolkit installation directory.
2.- Type jbe -createPasswordFile pass.txt. Note: pass.txt can be any file name.
3.- When prompted, type the password. The password is encrypted and stored in a pass.txt file that is located in the Build System Toolkit installation directory

-----------------------------------------------------------------------------------
IIS instalation or use a MAMP install

You can find a MAMP installer for Mac at Dev3rdPartyTools/MAMP server/MacOSX/bitnami-mampstack-5.4.32-0-osx-x86_64-installer.dmg. 
This will be used to install web applications to test against. 

-----------------------------------------------------------------------------------

Build System
------------
To see all available ant targets type 'ant -p' in a console window in the project
root directory.

- Tests:
  To run the tests you need to create a file called 'my.properties' in the
  directory tools/config/. There are two possible ways to run the tests:

  1. Let jsTestDriver handle the browser startup and shutdown (and run each
     test in fresh browser sessions) (slower)
     - Contents of the file tools/config/my.properties:

--- FILE tools/config/my.properties ---
# Specify the browserService you'd like to use.
# Could be either 'jQuery' or 'w3c'
browserService = jQuery
# Specify the port on which jsTestDriver should run and the paths to the
# browsers in which jsTestDriver should run the tests.
# You could specify multiple browsers, separated by comma and you can pass
# command line flags to the browsers with a semicolon:
# e.g.: /path/to/browser;--incognito
# if your path or command line flags contains spaces you need to put them into
# quotes, e.g.: /usr/bin/firefox;'-no-remote -P profile_x'.
# It seems that backslashes (\) needs to be escaped on windows machines (\\).
tool.jstestdriver.browser = --port 4224 --browser /usr/bin/firefox;'-no-remote -P profile_x',/usr/bin/opera,/opt/google/chrome;--incognito
--- EOF ---

     - After you created this file and set the correct paths to the browsers
       you need to go into the project root directory and run 'ant <target>'
       e.g.: $ ant tests
       Now jsTestDriver starts for each test all of the specified browsers,
       run the tests and closes the browsers again.
       Due to the frequent startup and shutdown of the browsers this tests
       take a bit more time but are also more accurately because there are
       always fresh browser sessions with no fragments from previous tests
       which could cause the tests to either fail or pass unexpectedly.

  2. Manually start a jsTestDriver server, capture some browsers and let the
     tests run in these captured browser(s) (faster)
     - You could also manually start the jsTestDriver in another console window
       via $ tools/jsTestDriver/JsTestDriver-1.3.5.jar --port 4224
       this tells jsTestDriver to start a server instance and listen on port 4224
       now you could capture some browsers by opening http://127.0.0.1:4224/
       or http://localhost:4224/
     - You then need to modify the file tools/config/my.properties:

--- FILE tools/config/my.properties ---
# Specify the browserService you'd like to use.
# Could be either 'jQuery' or 'w3c'
browserService = jQuery
# a.) If you want to run the tests against a local server instance of jsTestDriver
#     you need to leave the following property empty.
# b.) If you run the tests against a remote server instance (for example if you
#     started a jsTestDriver server instance on a remote machine and captured some
#     browsers in it) you need to specify the server location by setting the following
#     property to: tool.jstestdriver.browser = --server http://remotename:port
tool.jstestdrover.browser = 
--- EOF ---

     - Once you captured one or more browsers you open another terminal window
       and type in 'ant <target>' e.g.: $ ant tests
       jsTestDriver now connects via tcp to the server instance, transfers the
       tests to the server (which then gets transferred to the clients) and
       executes all tests in the captured browsers.
       This is faster because jsTestDriver doesn't need to startup/shutdown
       the browsers for each test but reuses the captured browsers.
       However, this could also lead to some strange behaviour, if some tests
       or code leaves some fragments in the global namespace which interferes
       with the next test.

  - Because each component has it's own configuration file you could specify
    a commandline flag to run only a subset of the tests.
    For example: If you only want to run the tests for a specific module
    you would type in your terminal: $ ant tests -Dtest modules/specificModule
    You could also use wildcards: $ ant tests -Dtest modules/*
    The property 'test' is a relative path from the tests directory to the
    configuration file for that tests without the .conf extension.
    By default the property test is set to **/* which runs all the tests.


Example my.properties file for Mac installation:
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# Specify the browserService you'd like to use.
# Could be either 'jQuery' or 'w3c'
browserService = jQuery

# Specify the port on which jsTestDriver should run and the paths to the
# browsers in which jsTestDriver should run the tests.
# You could specify multiple browsers, separated by comma and you can pass
# command line flags to the browsers with a semicolon:
# e.g.: /path/to/browser;--incognito
# if your path or command line flags contains spaces you need to put them into
# quotes, e.g.: /usr/bin/firefox;'-no-remote -P profile_x'.
# It seems that backslashes (\) needs to be escaped on windows machines (\\).
tool.jstestdriver.browser = --port 4224 --browser '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome'
#Browers to test
browsers=chrome

#RTC settings per user
rtc.build.user=ohernandez@us.ibm.com
file.rtc.build.user.password=/Developer/jazz/buildsystem/myRTCPass.txt

#Web server settings for tests
#Root web server url
testHost=http://localhost:8080
#Root location to place web applications
dir.webserver=/Developer/mampstack-5.4.32-0/apache2/htdocs

#JSCover settings
hostJSCover=http://localhost:8095
jscoverEnabled=false
website.name=testWebSite_current
testUrl=http://localhost:8080/testWebSite_current

#Local path of UICTestData
testDataBaseDir=/Users/ohernandezltrmac/dev/RTC_Production/UICapture/test/webdriver/UICTestData

#Test settings
preprocess.define=DEBUG
--- EOF ---
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Continuous Integration Guidelines
--------------------------------
One of the primary reasons for a CI setup is to obtain immediate feedback on
code changes. Such feedback, when it occurs in a time window of a few hours
of the change, dramatically reduces the cost of fixing any identified issues
with the change.

In order for the CI system to be effective, builds have to complete within as
short a time as possible. Needless to say, a broken build MUST be attended to
immediately since it will seriously impact the productivity and effectiveness
of all contributors to the project.

General guidelines to keep in mind are:

- Before submitting a change, you MUST run a full build which includes unit
  and functional tests on your LOCAL development machine. If the build or
  tests fail, you MUST determine the root cause. If the cause of failures is
  in your change, you MUST address these issues BEFORE submitting the change.
  
- After submitting a change, you MUST monitor the CI builds for any failures.
  If the CI build fails, you MUST determine the root cause and fix it 
  (regardless of relation to your specific change.) If you need help, you
  should escalate it to the team.
  
- The time window for FIXING a broken CI build is 24 hours. If within this time
  a broken build cannot be fixed, the offending change(s) must be backed out.
  
- DO NOT gather multiple unrelated changes and commit them together.

- Avoid making massive changes, instead, follow the CI and agile philosophy of
  breaking your work into incremental changes that are still complete.

Coding Guidelines and Rules
---------------------------
Please read this section before contributing any changes to the project. Not
only will this project's source be read by your co-workers but it is very
likely to be reviewed by customers as well.

General guidelines to keep in mind are:

- When modifying pre-existing code, follow the structure and style of the
  existing code. If the existing structure is inconsistent or unclear then
  refer to the specific rules below. If you are still not sure, discuss with
  project members and agree on the rules which everyone will follow. Add the
  rules to this document for the benefit of all.

- Strive to write self-explanatory code. This means giving some thought to
  your choice of variable and function names, following established formatting
  rules and using standard design patterns. Supplement difficult sections with
  comments.

- When writing comments always focus on describing what you intend the code to
  do. This way if you make a mistake in your implementation it is much easier
  for someone (may be even you!) to come along later and apply the right fix
  without having to guess your original intent.

- Comments are most effective at the beginning of functions and/or logically
  distinct code blocks. Follow the documentation tool guidelines and annotate
  your comments accordingly.

- Do not "litter" your code with comments. Instead spend some effort to make
  your code self-explanatory.

Specific rules which MUST be followed are:

1. Indentation is 4 spaces. Tab stops MUST be set to insert 4 spaces.
Example:

function doSomething(a, b) {
    "use strict";
    var c = 2,
        d = 10,
        doSomeWork = function () { };

    if (a > b) {
        doSomeWork = function () {
            return {
                servings: c + d
            };
        };
    } else {
        doSomeWork = function () {
            return {
                servings: d - c
            };
        };
    }

    return doSomeWork;
}

2. Limit line length to a reasonable limit of 80-100 characters. Such a limit
will ensure readability and encourages the use of meaningful yet non-verbose
variable and function names.

3. As a corollary to Rule #2, if your code requires deeper levels of
indentation that cause you to exceed the line length limits, you MUST revisit
the program logic. In almost all cases, levels of indentation greater than
5 should be a cause of concern and indicate code that should be refactored.

4. Curly braces MUST always be used regardless of if they are syntactically
optional. Always begin the brace on the same line as the previous statement.
Always end the brace at the same indentation level as that of it's beginning
statement.
Example:

// BAD practice
if (love > war)
    makeLove();
else {
         makeWar();
     }

// GOOD practice
if (love > war) {
    makeLove();
} else {
    makeWar();
}

5. White space should be used to improve readability and consistency of code.
The following specific rules MUST be followed.

On either side of binary operators.
Examples:

a = b
a && b
a === b
a + b

After comma and semicolon separators.
Examples:

for (a = 0, b = 1; a < b; a++)
doSomething(a, b, c)

After the colon separating the property name from it's value. Also, each
property of the object literal must be on a new line.
Example:

myObj = {
   a: 1,
   b: false
};

After function in anonymous function expressions.
Example:

doSomething = function () { };

Do not insert whitespace after beginning or before closing parentheses.
Example:

(a === b || c !== d)
for (i = 0; i < 10; i++)

6. Absolutely NO pollution of the global namespace except for objects
explicitly mentioned in the library's API documentation.

7. No use of eval.

8. All local variables must be defined at the top of the function scope in a
single var statement. All variable names must start at the same indentation
level. All variables must be explicitly initialized with initial/default
values. String literals must use double quotes.

Example:
function doSomething() {
    var someNumber = 0,
        someString = "",
        someArray = [],
        someUnknown = null,
        someObject = null;
}

9. Naming conventions MUST be followed.

Variables used to index arrays should be simply named as: i, j, k etc. instead
of 'idx', 'index' etc.

Constants and namespaces must be all capitals and the underscore '_' should
be used as a word separator. e.g. MAX_RETRIES = 3;

Functions and variable names must start with a small-case letter and use
camelCase.

Constructor functions must start with an upper-case letter.

Names should be specific so as to convey meaning and improve readability of
the code. Function names must be chosen to reflect the specific action being
performed within the function and should begin with the verb describing such
action. e.g. enqueue, createXXX, sortXXX, getXXX, insertXXX etc.

By the same token, non-function variable names must begin with a noun so as
not to be confused with a function.

10. Styles for commonly used syntax:

Function Definitions:

function doSomething(a, b) {
    var x = 0,
        y = 0;

    if (a > b) {
        x = b;
        y = a - b;
    } else {
        x = a;
        y = a + b;
    }

    return (x > y);
};

doSomething = function (arg1, arg2) {

    ...

};

Self-executing functions:

var retVal = (function (arg1, arg2) {

    ...

}("first", "second"));

If-Else statements:

if (condition) {
    doThis();
} else {
    doThat();
}

For loop:

var i = 0,
    a = [3, 9, 1, 83],
    largest = 0,
    length = 0;

for (i = 0, length = a.length; i < length; i++) {
    largest = ((a[i] > largest) ? a[i] : largest);
}

11. All source code MUST pass lint check on JSLint.com without any warnings
or errors.

12. All source code should be compatible with ECMAScript 5's strict mode.
i.e. "use strict" directive must be used (take care that the directive is not
applied to the global scope) and any exceptions must be duly noted.



Setup Machine
--------------

https://w3-connections.ibm.com/wikis/home?lang=en-us#!/wiki/W4c2c2152d10e_42ab_b2d2_1589c928fbb9/page/Setup%20for%20UICapture%20Development
%20Development
