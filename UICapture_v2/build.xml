<?xml version="1.0" encoding="utf-8"?>
<!-- 
 Licensed Materials - Property of HCL
 (c) Copyright HCL Technologies Ltd.  2020. All Rights Reserved.
 US Government Users Restricted Rights - Use, duplication or disclosure
 restricted by GSA ADP Schedule Contract with HCL Technologies.
 -->
<project name="HCL Discover UI Capture SDK Build"
         default="build.test"
         basedir=".">
  <taskdef resource="net/sf/antcontrib/antcontrib.properties" >
    <classpath>
      <pathelement location="${ANT_HOME}/lib/ant-contrib-0.3.jar"/>
    </classpath>
  </taskdef>

  <!-- For now it antlib.xml doesn't exist in ant-contrib-0.3.3jar -->
  <!-- <taskdef resource="net/sf/antcontrib/antlib.xml"/> -->

  <!-- load shell environment -->
  <property environment="ENV" />

  <!-- load property file -->
  <!-- Make changes in the my.properties file to overwrite default properties-->
  <property file="./tools/config/my.properties" />
  <property file="./tools/config/default.properties" />
  <property file="./buildNumber.properties" />

  <path id="js.lib">
    <pathelement location="${dir.tools}/${tool.rhino}" />
  </path>

  <scriptdef name="preprocess"
             src="${dir.tools}/${tool.preprocess}"
             language="javascript">
    <classpath>
      <path refid="js.lib" />
    </classpath>
    <attribute name="defines" />
    <attribute name="todir" />
    <attribute name="file" />
    <attribute name="tofile" />
    <element name="fileset" type="fileset" />
  </scriptdef>

  <target name="build.dev"
          description="Builds a dev-build (only preprocess, jshint/jslint and concatenate).">
    <property name="preprocess.defines"
              value="${tool.preprocess.defines.dev}" />
    <antcall target="-build.dev" />
  </target>

  <target name="-build.dev"
          description="This is a private target."
          depends="-clean,
                   -mkdirs,
                   -preprocess,
                   jshint-dev,
                   jslint-dev,
                   -concatenate" />

  
  
  <target name="build.test"
          description="Builds a test-build (runs build.dev, the unit tests and convertcoverage).">
    <property name="preprocess.defines"
              value="${tool.preprocess.defines.test}" />
    <antcall target="-build.test" />
  </target>

  <target name="-build.test"
          description="This is a private target."
          depends="-build.dev,
                   unit-tests,
                   functional-tests,
                   JSCover-stop,
                   convertcoverage" />

  <!-- The initial build job for jenkins, It creates the proper directory structure
     for all the sub-jobs to run their tests on -->
  <target name="build.jenkinsMain"
          depends="-clean"
          description="Builds a dev-build for Jenkins.">
    <mkdir dir="jqueryDebug" />
    <copy todir="./jqueryDebug">
      <fileset dir=".">
        <exclude name="jqueryDebug/**"/>
        <exclude name="jqueryProd/**"/>
        <exclude name="w3cDebug/**"/>
        <exclude name="w3cProd/**"/>
        <exclude name=".jazz5/**"/>
      </fileset>
    </copy>
    <mkdir dir="jqueryProd" />
    <copy todir="./jqueryProd">
      <fileset dir=".">
        <exclude name="jqueryDebug/**"/>
        <exclude name="jqueryProd/**"/>
        <exclude name="w3cDebug/**"/>
        <exclude name="w3cProd/**"/>
        <exclude name=".jazz5/**"/>
      </fileset>
    </copy>
    <mkdir dir="w3cDebug" />
    <copy todir="./w3cDebug">
      <fileset dir=".">
        <exclude name="jqueryDebug/**"/>
        <exclude name="jqueryProd/**"/>
        <exclude name="w3cDebug/**"/>
        <exclude name="w3cProd/**"/>
        <exclude name=".jazz5/**"/>
      </fileset>
    </copy>
    <mkdir dir="w3cProd" />
    <copy todir="./w3cProd">
      <fileset dir=".">
        <exclude name="jqueryDebug/**"/>
        <exclude name="jqueryProd/**"/>
        <exclude name="w3cDebug/**"/>
        <exclude name="w3cProd/**"/>
        <exclude name=".jazz5/**"/>
      </fileset>
    </copy>

    <var name="preprocess.defines" value="DEBUG" />
    <var name="browserService" value="jQuery" />
    <antcall target="-build.jenkinsMain">
      <param name="basedir" value="./jqueryDebug"/>
    </antcall>

    <var name="preprocess.defines" value="NDEBUG" />
    <var name="browserService" value="jQuery" />
    <antcall target="-build.jenkinsMain">
      <param name="basedir" value="./jqueryProd"/>
    </antcall>

    <var name="preprocess.defines" value="DEBUG" />
    <var name="browserService" value="w3c" />
    <antcall target="-build.jenkinsMain">
      <param name="basedir" value="./w3cDebug"/>
    </antcall>

    <var name="preprocess.defines" value="NDEBUG" />
    <var name="browserService" value="w3c" />
    <antcall target="-build.jenkinsMain">
      <param name="basedir" value="./w3cProd"/>
    </antcall>
  </target>

  <target name="-build.jenkinsMain"
      description="This is a private target."
      depends="-mkdirs,
               -preprocess,
               jshint,
               jslint,
               -concatenate,
               -compress" >
    <echo message="Build completed." />
  </target>

  <target name="test.jenkins.performance.size"
          description="Builds a prod-build and generates plot data for library size.">
    <property name="preprocess.defines"
              value="${tool.preprocess.defines.prod}" />
    <mkdir dir="${dir.plotfiles}" />
    <antcall target="-plot.libsize" />
  </target>

  <target name="test.jenkins.performance.load"
          description="Builds a prod-build and generates plot data for library size.">
    <property name="preprocess.defines"
              value="${tool.preprocess.defines.prod}" />
    <antcall target="-test.jenkins.performance.load" />
  </target>

  <target name="-test.jenkins.performance.load"
          description="This is a private target."
          depends="-clean,
                        -mkdirs,
                        -preprocess,
                        -concatenate,
                        -compress,
                        junit-performance-tests,
                        killAllBrowsers" />

  <target name="-plot.libsize"
          description="Creates plot property files for the library size (concat, minified, min+zip).">
    <length file="${dir.build}/discoverui.concat.js"
            property="libsize.concat" />
    <echo message="discoverui.concat.js size = ${libsize.concat}" />
    <antcall target="-plot.createpropertyfile">
      <param name="plot.propertyfile"
             value="${dir.plotfiles}/libsize.concat.properties" />
      <param name="plot.yvalue" value="${libsize.concat}" />
    </antcall>

    <length file="${dir.build}/discoverui.min.js"
            property="libsize.concat.min" />
    <echo message="discoverui.min.js size = ${libsize.concat.min}" />
    <antcall target="-plot.createpropertyfile">
      <param name="plot.propertyfile"
             value="${dir.plotfiles}/libsize.concat.min.properties" />
      <param name="plot.yvalue" value="${libsize.concat.min}" />
    </antcall>

    <zip destfile="${dir.intermediate}/discoverui.min.js.zip" level="9">
      <fileset dir="${dir.build}" includes="discoverui.min.js" />
    </zip>
    <length file="${dir.intermediate}/discoverui.min.js.zip"
            property="libsize.concat.min.zip" />
    <echo message="discoverui.min.js gzip size = ${libsize.concat.min.zip}" />
    <delete file="${dir.intermediate}/discoverui.min.js.zip" />
    <antcall target="-plot.createpropertyfile">
      <param name="plot.propertyfile"
             value="${dir.plotfiles}/libsize.concat.min.zip.properties" />
      <param name="plot.yvalue" value="${libsize.concat.min.zip}" />
    </antcall>
  </target>

  <target name="-plot.createpropertyfile"
          description="Creates a property file for consumption by the Jenkins plot plugin.">
    <propertyfile file="${plot.propertyfile}">
      <entry key="YVALUE" value="${plot.yvalue}" />
    </propertyfile>
  </target>

  <target name="test.prod"
          description="Builds a prod-build (runs everything which gets executed via build.test, generates the API documentation and compresses the generated source code).">
    <property name="preprocess.defines"
              value="${tool.preprocess.defines.prod}" />
    <antcall target="-test.prod" />
  </target>

  <target name="-test.prod"
          description="This is a private target."
          depends="-clean,
                   -mkdirs,
                   -preprocess,
                   jshint,
                   jslint,
                   -concatenate,
                   -compress,
                   -concatenate-default-configuration" />
                  <!-- unit-tests, 
                  functional-tests,
                   JSCover-stop,
                   convertcoverage,
                   gendocs" -->
  <target name="build.appscan"
          description="Builds a preprocessed version of source files that are suitable for security scans.">
    <property name="preprocess.defines"
              value="${tool.preprocess.defines.prod}" />
    <antcall target="-build.appscan" />
  </target>

  <target name="-build.appscan"
      description="This is a private target."
      depends="-clean,
               -mkdirs,
               -preprocess">
  </target>

  <target name="updatedependencies"
          description="Fetch JSLint and JSHint from their github URLs and save them in the tools directory.">
    <echo message="Updating JSHint and JSLint from github and appending the rhino shell..." />
    <get src="${tool.jslint.githubsrc}"
         dest="${dir.tools}/${tool.jslint}" />
    <get src="${tool.jshint.githubsrc}"
         dest="${dir.tools}/${tool.jshint}" />
    <concat destfile="${dir.tools}/${tool.jslint}" append="true">
      <filelist files="${dir.tools}/${tool.jshint_rhinoshell}" />
    </concat>
    <concat destfile="${dir.tools}/${tool.jshint}" append="true">
      <filelist files="${dir.tools}/${tool.jshint_rhinoshell}" />
    </concat>
    <replace file="${dir.tools}/${tool.jslint}"
             token="JSHINT"
             value="JSLINT" />
  </target>

  <target name="-clean" depends="">
    <!-- Cleanup any stale processes that might be holding onto files -->
    <antcall target="killWebDriverProcesses" />
    <!-- <antcall target="killJSTestDriverProcesses" /> -->

    <!-- This is a private target -->
    <echo message="Cleaning up previous build directories..." />
    <delete dir="${dir.build}" />
    <delete dir="${dir.intermediate}" />
    <delete dir="./jqueryDebug" />
    <delete dir="./jqueryProd" />
    <delete dir="./w3cDebug" />
    <delete dir="./w3cProd" />


    <!-- Remove older test sites-->
    <tstamp>
      <format property="endDate"
              pattern="MM/dd/yyyy HH:mm aa"
              unit="day"
              offset="${noDaysToCleanTestSites}"
              locale="en,US" />
    </tstamp>
    <echo message="Cleaning previous testWebSites from ${dir.webserver} with older date of ${endDate}..." />
    <pathconvert property="olderTestDirectories" pathsep=",">
      <regexpmapper from="^(.*)$" to="\1" handledirsep="true" />
      <map from="${basedir}/" to="" />
      <dirset dir="${dir.webserver}" includes="testWebSite_*">
        <date datetime="${endDate}" when="before" checkdirs="true" />
      </dirset>
    </pathconvert>

    <!-- Delete only if old test sites are found -->
    <if>
      <length string="${olderTestDirectories}"
              when="greater"
              length="0" />
      <then>
        <propertyregex property="dir.olderTest.windows"
                       input="${olderTestDirectories}"
                       regexp="\/"
                       replace="\\\\"
                       global="true" />
        <for list="${dir.olderTest.windows}" param="dir.older">
          <sequential>
            <echo message="Delete:@{dir.older}" />
            <exec executable="cmd" osfamily="windows">
              <arg value="/c" />
              <arg value="del" />
              <arg value="/s" />
              <arg value="/f" />
              <arg value="/q" />
              <arg line='"@{dir.older}"' />
            </exec>
            <exec executable="cmd" osfamily="windows">
              <arg value="/c" />
              <arg value="rmdir" />
              <arg value="/s" />
              <arg value="/q" />
              <arg line='"@{dir.older}"' />
            </exec>
            <exec executable="rm" osfamily="mac">
              <arg value="-R" />
              <arg value="@{dir.older}" />
            </exec>
          </sequential>
        </for>
      </then>
    </if>
  </target>

  <target name="-mkdirs" depends="">
    <!-- This is a private target -->
    <echo message="Creating directory structure..." />
    <mkdir dir="${dir.build}" />
    <mkdir dir="${dir.docs}" />
    <mkdir dir="${dir.intermediate}" />
    <mkdir dir="${dir.testresults}" />
    <mkdir dir="${dir.jscoverresults}" />
    <mkdir dir="${dir.plotfiles}" />
    <copy todir="${dir.intermediate}" includeEmptyDirs="true">
      <fileset dir="${dir.src}">
        <type type="dir" />
      </fileset>
    </copy>
  </target>

  <target name="-browserServiceCheck" depends="">
    <!-- Private target to check the browserService is correctly specified. -->
    <if>
      <and>
        <not>
          <equals arg1="${browserService}" arg2="w3c" />
        </not>
        <not>
          <equals arg1="${browserService}" arg2="jQuery" />
        </not>
      </and>
      <then>
        <echo message="NOTE that the browserService is case-sensitive. Specify 'w3c' or 'jQuery' only." />
        <fail message="Invalid browserService '${browserService}'." />
      </then>
    </if>
  </target>

  <target name="-preprocess" depends="-browserServiceCheck">
    <!-- This is a private target -->
    <echo message="Executing js-preprocessor and copying the processed files from ${dir.src} to ${dir.intermediate}..." />
    <echo message="Using following build flags: " />
    <echo message="${preprocess.defines},${browserService}" />
    <preprocess todir="${dir.intermediate}"
                defines="${preprocess.defines},${browserService}">
      <fileset dir="${dir.src}"
               includes="**/*.js" />
    </preprocess>

    <!-- <antcall target="-updatebuildinfo" /> -->
    <antcall target="-setbuildinfo" />
  </target>

  <target name="-setbuildinfo">
    <property name="build.version"
              value="${build.major.number}.${build.minor.number}.${build.revision.number}" />
    <tstamp>
      <format property="builtTime" pattern="MM/dd/yyyy hh:mm aa" />
    </tstamp>

    <exec executable="whoami" outputproperty="whoami" />

    <propertyfile file="${dir.build.properties}">
      <entry key="build.number" value="${build.number}" />
      <entry key="preprocess.defines" value="${preprocess.defines}" />
      <entry key="build.version" value="${build.version}" />
      <entry key="built.by" value="${whoami}" />
    </propertyfile>

    <replaceregexp byline="true"
                   match="DCXLIB_TOKEN_VERSION"
                   replace="${build.version}">
      <fileset dir="${dir.intermediate}/services">
        <include name="queueService.js" />
        <include name="messageService.js" />
      </fileset>
      <fileset dir="${dir.intermediate}/core">
        <include name="core.js" />
      </fileset>
      <fileset dir="${dir.intermediate}/other/gestures">
        <include name="gestures.js" />
      </fileset>
    </replaceregexp>

    <echo>Set build version: ${build.version}</echo>

    <replaceregexp byline="true"
                   match="DCXLIB_TOKEN_BUILD_FLAGS"
                   replace="${browserService},${preprocess.defines}">
      <fileset dir="${dir.intermediate}/core">
        <include name="core.js" />
      </fileset>
    </replaceregexp>

    <replaceregexp byline="true"
                   match="DCXLIB_TOKEN_JSON_VERSION"
                   replace="${json.version}">
      <fileset dir="${dir.intermediate}/services">
        <include name="messageService.js" />
      </fileset>
    </replaceregexp>

    <echo>Set json version: ${json.version}</echo>
  </target>
  <!--
    <target name="-updatebuildinfo">
        <echo>Update version on library based on revision number</echo>
        <property name="build.number"
                  value="${build.major.number}.${build.minor.number}.${build.revision.number}" />
        <echo>Updating build number: ${build.number}</echo>
        <tstamp>
            <format property="builtTime" pattern="MM/dd/yyyy hh:mm aa" />
        </tstamp>
        <exec executable="svnversion" outputproperty="svnversionraw">
            <arg line="-c" />
        </exec>
        <echo>SVN raw revision number: ${svnversionraw}</echo>
        <propertyregex property="svnversion"
                       input="${svnversionraw}"
                       regexp="^[0-9]*:?|[A-Z]+"
                       replace=""
                       global="true" />
        <echo>SVN revision number: ${svnversion}</echo>
        <exec executable="whoami" outputproperty="whoami" />

        <property name="updated.build.number"
                  value="${build.number}.${svnversion}" />

        <propertyfile file="${dir.build.properties}">
            <entry key="revision.no" value="${svnversion}" />
            <entry key="preprocess.defines" value="${preprocess.defines}" />
            <entry key="updated.build.number" value="${updated.build.number}" />
            <entry key="built.by" value="${whoami}" />
        </propertyfile>

        <replaceregexp byline="true"
                       match="DCXLIB_TOKEN_VERSION"
                       replace="${updated.build.number}">
            <fileset dir="${dir.intermediate}/services">
                <include name="queueService.js" />
                <include name="messageService.js" />
            </fileset>
            <fileset dir="${dir.intermediate}/core">
                <include name="core.js" />
            </fileset>
        </replaceregexp>

        <echo>Updated build number: ${updated.build.number}</echo>

        <replaceregexp byline="true"
                       match="DCXLIB_TOKEN_BUILD_FLAGS"
                       replace="${browserService},${preprocess.defines}">
            <fileset dir="${dir.intermediate}/core">
                <include name="core.js" />
            </fileset>
        </replaceregexp>

        <replaceregexp byline="true"
                       match="DCXLIB_TOKEN_JSON_VERSION"
                       replace="${json.version}">
            <fileset dir="${dir.intermediate}/services">
                <include name="messageService.js" />
            </fileset>
        </replaceregexp>
        <echo>Updated json version: ${json.version}</echo>
    </target>
    -->

  <!-- JSHint target, run separately -->
  <target name="jshint"
          depends="-preprocess"
          description="Run JSHint on the source code files and write the output to ${dir.intermediate}/jshint-results.xml. Will stop the build process if an error was found.">
    <apply dir="${dir.intermediate}"
           executable="java"
           parallel="true"
           failonerror="true"
           output="${dir.intermediate}/jshint-results.xml">
      <fileset dir="${dir.intermediate}">
        <include name="**/*.js" />
      </fileset>
      <arg line="-jar" />
      <arg path="${dir.tools}/${tool.rhino}" />
      <arg path="${dir.tools}/${tool.jshint}" />
      <srcfile />
      <arg line="--options=${tool.jshint.opts}" />
      <arg line="--output=checkstyle" />
    </apply>

    <!-- Need to fill in file with empty checkstyle node, because Jenkins does not like using an empty file. It is a know issue in Jenkins violations plugin. -->
    <if>
      <length file="${dir.intermediate}/jshint-results.xml" length="1" when="lt" mode="all"/>
      <then>
        <concat destfile="${dir.intermediate}/jshint-results.xml">&lt;checkstyle&gt;&lt;/checkstyle&gt;</concat>
      </then>
    </if>
    <length file="${dir.intermediate}/jshint-results.xml" property="jshint.file.length" />
    <echo>JSHint file length:${jshint.file.length}</echo>
    <echo>JSHint Successful</echo>
  </target>

  <!-- JSLint target, run separately -->
  <target name="jslint"
          depends="-preprocess"
          description="Run JSLint on the source code files and write the output to ${dir.intermediate}/jslint-results.xml. Will not stop the build process if it encounters an error.">
    <apply dir="${dir.intermediate}"
           executable="java"
           parallel="true"
           failonerror="false"
           output="${dir.intermediate}/jslint-results.xml">
      <fileset dir="${dir.intermediate}">
        <include name="**/*.js" />
      </fileset>
      <arg value="-jar" />
      <arg path="${dir.tools}/${tool.rhino}" />
      <arg path="${dir.tools}/${tool.jslint}" />
      <srcfile />
      <arg line="--options=${tool.jslint.opts}" />
      <arg line="--output=jslint" />
    </apply>
    <echo>JSLint Successful</echo>
  </target>

  <!-- JSHint target, run separately -->
  <target name="jshint-dev"
          depends="-preprocess"
          description="Run JSHint on the source code files and write to output to stdout (current terminal window). Will stop the build process if an error was found.">
    <apply dir="${dir.intermediate}"
           executable="java"
           parallel="true"
           failonerror="true">
      <fileset dir="${dir.intermediate}">
        <include name="**/*.js" />
      </fileset>
      <arg line="-jar" />
      <arg path="${dir.tools}/${tool.rhino}" />
      <arg path="${dir.tools}/${tool.jshint}" />
      <srcfile />
      <arg line="--options=${tool.jshint.opts}" />
      <arg line="--output=plain" />
    </apply>
    <echo>JSHint Successful</echo>
  </target>

  <!-- JSLint target, run separately -->
  <target name="jslint-dev"
          depends="-preprocess"
          description="Run JSLint on the source code files and write the output to stdout (current terminal window). Will not stop the build process if it encounters an error.">
    <apply dir="${dir.intermediate}"
           executable="java"
           parallel="true"
           failonerror="false">
      <fileset dir="${dir.intermediate}">
        <include name="**/*.js" />
      </fileset>
      <arg value="-jar" />
      <arg path="${dir.tools}/${tool.rhino}" />
      <arg path="${dir.tools}/${tool.jslint}" />
      <srcfile />
      <arg line="--options=${tool.jslint.opts}" />
      <arg line="--output=plain" />
    </apply>
    <echo>JSLint Successful</echo>
  </target>

  <property name="test" value="**/*" />

  <target name="functional-tests"
          description="Will run the WebDriver selenium tests">
    <echo message="Running Webdriver functional tests..." />
    <!-- Clean up before WebDriver -->
    <antcall target="killWebDriverProcesses" />

    <if>
      <contains string="${browsers}" substring="selendroid" />
      <then>
        <propertyregex property="browsersTemp"
            input="${browsers}"
            regexp="(selendroid, )"
            replace=""
            casesensitive="false" />
        <propertyregex property="browsersTemp"
            input="${browsers}"
            regexp="( ,selendroid)"
            replace=""
            casesensitive="false" />
        <antcall target="junit-tests" />
        <antcall target="killWebDriverProcesses" />

        <var name="browsersTemp" unset="true"/>
        <property name="browsersTemp" value="selendroid"/>
        <antcall target="junit-tests" />
      </then>

      <else>
        <property name="browsersTemp" value="${browsers}"/>
        <antcall target="junit-tests" />
      </else>
    </if>

    <!-- Clean up after WebDriver -->
    <antcall target="killWebDriverProcesses" />
  </target>

  <target name="unit-tests"
          description="Will run the JSTestDriver unit tests against the source code.">
    <echo message="Running unit tests against your code..." />
    <copy todir="${dir.intermediate}">
      <fileset dir="${dir.test}" includes="**/*.conf" />
    </copy>

    <echo message="Start js-test-driver server..." />
    <echo message="java -jar ${dir.tools}/${tool.jstestdriver} ${tool.jstestdriver.browser}" />
    <exec executable="java" spawn="true">
      <arg value="-jar" />
      <arg path="${dir.tools}/${tool.jstestdriver}" />
      <arg line="${tool.jstestdriver.browser}" />
    </exec>

    <echo message="Wait for js-test-driver server..." />
    <sleep seconds="${tool.jstestdriver.serverdelay}" />

    <!-- Used for excluding js-test-driver unit tests.

        Builds an exclusion list of tests from the property 'tool.jstestdriver.excludeTests'
        If the property is not found, no exclusions are made.

        The property 'tools.jstestdriver.excludeTest.list' will be generated and
        passed as the value to an 'excludes' attribute when building a fileset of all
        .conf files that will be tested.

        Example:
            Input:
                tool.jstestdriver.excludeTests=integration-sinon.conf,*Service*

            Output:
                tools.jstestdriver.excludeTest.list=**/integration-sinon.conf,**/*Service*,
        -->

    <echo message="Building js-test-driver test list..." />
    <property name="tool.jstestdriver.excludeTest.list" value="" />

    <if>
      <isset property="tool.jstestdriver.excludeTests" />

      <then>
        <echo message="Excluding: ${tool.jstestdriver.excludeTests}" />
        <property name="list.temp" value="" />

        <for list="${tool.jstestdriver.excludeTests}"
             delimiter=","
             param="list.entry">
          <sequential>
            <var name="list.temp"
                 value="${tool.jstestdriver.excludeTest.list}**/@{list.entry}," />
            <var name="tool.jstestdriver.excludeTest.list"
                 value="${list.temp}" />
          </sequential>
        </for>
      </then>

    </if>

    <fileset id="conf.files"
             dir="${dir.intermediate}"
             excludes="${tool.jstestdriver.excludeTest.list}"
             includes="**/*.conf" />


    <pathconvert pathsep=";"
                 property="conf.files.string"
                 refid="conf.files">
    </pathconvert>

    <echo message="Start js-test-driver tests..." />
    <for list="${conf.files.string}" delimiter=";" param="conf.file">
      <sequential>
        <propertyregex property="test.dir.name"
                       input="@{conf.file}"
                       regexp="\w+(\.conf+$)|(\w+\.)\w+(\.conf+$)"
                       select="\0"
                       override="true"
                       casesensitive="false" />

        <echo>java -jar ${dir.tools}/${tool.jstestdriver} --config @{conf.file} --runnerMode DEBUG --tests all --basePath ${basedir} --testOutput ${dir.testresults}/${test.dir.name}</echo>
        <exec executable="java">
          <arg value="-jar" />
          <arg path="${dir.tools}/${tool.jstestdriver}" />
          <arg value="--config" />
          <arg value="@{conf.file}" />
          <arg value="--runnerMode" />
          <arg value="QUIET" />
          <arg value="--tests" />
          <arg value="all" />
          <arg value="--basePath" />
          <arg value="${basedir}" />
          <arg value="--testOutput" />
          <arg path="${dir.testresults}/${test.dir.name}" />
        </exec>
        <sleep seconds="${tool.jstestdriver.testdelay}" />
      </sequential>
    </for>

    <!-- Clean up after jsTestDriver -->
    <antcall target="killJSTestDriverProcesses" />

    <!-- Convert code coverage report from LCOV to Cobertura format -->
    <antcall target="JSCover-stop" />
    <antcall target="convertcoverage" />
  </target>

  <target name="tests-no-coverage"
          depends="-preprocess"
          description="Will run the JSTestDriver unit tests against the source code."
          if="tool.jstestdriver.browserNoCoverage">
    <echo message="Running unit tests against your code..." />
    <copy todir="${dir.intermediate}">
      <fileset dir="${dir.test}" includes="**/*.conf" />
      <filterset>
        <filter token="COVERAGE" value="" />
      </filterset>
    </copy>
    <apply executable="java" failonerror="true">
      <fileset dir="${dir.intermediate}">
        <selector if="test">
          <filename name="${test}.conf" />
        </selector>
      </fileset>
      <arg value="-jar" />
      <arg path="${dir.tools}/${tool.jstestdriver}" />
      <arg line="--config" />
      <srcfile />
      <arg value="--runnerMode" />
      <arg value="DEBUG" />
      <arg value="--tests" />
      <arg value="all" />
      <arg value="--basePath" />
      <arg value="${basedir}" />
      <arg value="--testOutput" />
      <arg path="${dir.testresults}" />
      <arg line="${tool.jstestdriver.browserNoCoverage}" />
    </apply>
  </target>

  <target name="killJSTestDriverProcesses"
          description="Kills processes orphaned by js-test-driver">
    <delete file="pid.out.file" />
    <osfamily property="os.family" />
    <exec executable="jps" output="pid.out.file" />

    <loadfile property="pid.out" srcFile="pid.out.file">
      <filterchain>
        <linecontainsregexp>
          <!-- When running under the jenkins build, the js-test-driver is flagged as "UIC" -->
          <regexp pattern="^\s*[0-9]+\s+(UIC|${tool.jstestdriver.file})\s*$" />
        </linecontainsregexp>
        <tokenfilter>
          <replaceregex pattern="\s+(UIC|${tool.jstestdriver.file})\s*$"
                        replace=","
                        flags="gi" />
          <trim />
          <ignoreblank />
        </tokenfilter>
        <striplinebreaks />
      </filterchain>
    </loadfile>

    <if>
      <equals arg1="${pid.out}" arg2="$${pid.out}" />
      <then>
        <echo>No js-test-driver instance found.</echo>
      </then>
      <else>
        <for list="${pid.out}" delimiter="," param="pid">
          <sequential>
            <echo>Killing js-test-driver instance with PID - (@{pid})</echo>
            <exec executable="${tool.pskill}" osfamily="windows">
              <arg value="-accepteula" />
              <arg value="@{pid}" />
            </exec>
            <exec executable="kill" osfamily="mac">
              <arg value="@{pid}" />
            </exec>
          </sequential>
        </for>
      </else>
    </if>

    <delete file="pid.out.file" />

    <antcall target="killAllBrowsers" />
  </target>

  <target name="killWebDriverProcesses"
          description="Kills processes orphaned by Selenium WebDriver">
    <if>
      <equals arg1="$${doNotKillBrowsers}" arg2="${doNotKillBrowsers}" />
      <then>
        <echo>Close drivers - Firefox</echo>
        <exec executable="${tool.pskill}" osfamily="windows">
          <arg value="firefox.exe" />
          <arg value="-accepteula" />
        </exec>
        <exec executable="${tool.pskill}" osfamily="windows">
          <arg value="geckodriver.exe" />
          <arg value="-accepteula" />
        </exec>
        <echo>Close drivers - Chrome</echo>
        <exec executable="${tool.pskill}" osfamily="windows">
          <arg value="chromedriver.exe" />
          <arg value="-accepteula" />
        </exec>
        <echo>Close drivers - IExplorer</echo>
        <exec executable="${tool.pskill}" osfamily="windows">
          <arg value="IEDriverServer.exe" />
          <arg value="-accepteula" />
        </exec>
        <echo>Close drivers - Android</echo>
        <exec executable="${tool.pskill}" osfamily="windows">
          <arg value="adb.exe" />
          <arg value="-accepteula" />
        </exec>
      </then>
    </if>
  </target>

  <target name="killAllBrowsers"
          description="Kills all browser processes, doesn't discriminate">
    <if>
      <equals arg1="$${doNotKillBrowsers}" arg2="${doNotKillBrowsers}" />
      <then>
        <echo>Close browsers - Firefox</echo>
        <exec executable="${tool.pskill}" osfamily="windows">
          <arg value="firefox.exe" />
          <arg value="-accepteula" />
        </exec>
        <echo>Close browsers - Chrome</echo>
        <exec executable="${tool.pskill}" osfamily="windows">
          <arg value="chrome.exe" />
          <arg value="-accepteula" />
        </exec>
        <echo>Close browsers - IExplorer</echo>
        <exec executable="${tool.pskill}" osfamily="windows">
          <arg value="iexplore.exe" />
          <arg value="-accepteula" />
        </exec>
      </then>
      <else>
        <echo>No browsers are being harmed during this build.</echo>
      </else>
    </if>
  </target>

  <target name="convertcoverage"
          description="Converts coverage.dat to a xml file which can be interpreted by jenkins.">
    <mkdir dir="${dir.testresults}/reports" />
    <copy todir="${dir.intermediate}" includeEmptyDirs="true">
      <fileset dir="${dir.src}">
        <type type="dir" />
      </fileset>
    </copy>

    <concat destfile="${dir.testresults}/reports/merged-coverage.dat">
      <fileset id="coverage.files" dir="${dir.testresults}">
        <include name="**/jsTestDriver.conf-coverage.dat" />
      </fileset>
    </concat>

    <echo message="Generating coverage report for Jenkins..." />
    <exec executable="python" failonerror="false">
      <arg value="${dir.tools}/jsTestDriver/lcov-to-cobertura-xml/lcov-to-cobertura-xml.py" />
      <arg value="${dir.testresults}/reports/merged-coverage.dat" />
      <arg value="-b" />
      <arg value="${dir.intermediate}/" />
      <arg value="-o" />
      <arg value="${dir.testresults}/coverage.xml" />
    </exec>
  </target>

  <target name="gendocs"
          description="Generate API documentation from source code files."
          depends="-preprocess">
    <echo message="Generating API documentation..." />
    <exec executable="java" failonerror="true">
      <arg value="-jar" />
      <arg path="${dir.tools}/${tool.jsdoctoolkitjsrun}" />
      <arg path="${dir.tools}/${tool.jsdoctoolkitrun}" />
      <arg line="-a -p -r=2 -d=${dir.docs} -t=${dir.tools}/jsdoc-toolkit/templates/jsdoc" />
      <arg path="${dir.intermediate}/" />
    </exec>
  </target>

  <target name="-concatenate" depends="-preprocess">
    <!-- This is a private target -->
    <echo message="Concatenate all JavaScript source files into one file: ${dir.build}/${file.concat.name} ..." />
    <concat destfile="${dir.build}/${file.concat.name}"
            overwrite="no"
            fixlastline="yes">
      <!-- Core -->
      <filelist dir="${dir.intermediate}"
                files="core/core.js,
                       core/utils.js,
                       core/eventTarget.js,
                       core/moduleContext.js" />
      <!-- Services -->
      <filelist dir="${dir.intermediate}"
                files="services/configService.js,
                       services/queueService.js" />
      <filelist dir="${dir.intermediate}"
                files="services/browserBaseService.js,
                       services/browserService.${browserService}.js,
                       services/ajaxService.${browserService}.js" />
      <fileset dir="${dir.intermediate}"
               includes="services/*.js"
               excludes="services/browser*,
                         services/ajaxService*,
                         services/configService.js,
                         services/queueService.js" />
      <!-- Modules -->
      <fileset dir="${dir.intermediate}" includes="modules/*.js" />
    </concat>
    <echo message="Concatenate frame-related JavaScript source files into one file: ${dir.build}/${file.concat.frame.name} ..." />
    <concat destfile="${dir.build}/${file.concat.frame.name}"
            overwrite="no"
            fixlastline="yes">
      <!-- Core -->
      <filelist dir="${dir.intermediate}"
                files="other/xdomain/core.js,
                       services/ajaxService.w3c.js,
                       other/xdomain/xdomainService.js" />
    </concat>
    <echo message="Concatenate gesture-related JavaScript source files into one file: ${dir.build}/${file.concat.gestures.name} ..." />
    <concat destfile="${dir.build}/${file.concat.gestures.name}"
            overwrite="no"
            fixlastline="yes">
      <filelist dir="${dir.intermediate}"
                files="other/gestures/gestures.js" />
    </concat>
    <echo message="Concatenate ajaxListener-related JavaScript source files into one file: ${dir.build}/${file.concat.ajaxListener.name} ..." />
    <concat destfile="${dir.build}/${file.concat.ajaxListener.name}"
            overwrite="no"
            fixlastline="yes">
      <filelist dir="${dir.intermediate}"
                files="other/ajaxListener/ajaxListener.js" />
    </concat>
  </target>

<target name="-concatenate-default-configuration"
          description="Concatinate discoverui.min.js and defaultconfiguration.js to discoverui.js">

    <delete file="${dir.build}/prod/discoverui.js" />
    <delete file="${dir.build}/prod/discoverui.min.js" />

    <mkdir dir="${dir.build}/prod" />
    <copy file="${file.defaultConfig}"
          todir="${dir.build}"
          force="true" />

    <echo message="Concatenating discoverui.js and ${file.defaultConfig} to discoverui.js" />
    <concat destfile="${dir.build}/prod/discoverui.js" force="yes">
      <filelist dir="${dir.build}/"
                files="discoverui.concat.js,${file.defaultConfig}" />
    </concat>
    <echo message="Concatenating discoverui.min.js and ${file.defaultConfig} to discoverui.js" />
    <concat destfile="${dir.build}/prod/discoverui.min.js" force="yes">
      <filelist dir="${dir.build}/"
                files="discoverui.min.js,${file.defaultConfig}" />
    </concat>
	<echo message="Copying file dcxWorker.js from ${basedir} to ${dir.build}/prod" />
	<copy file="${basedir}/dcxWorker.js"
          todir="${dir.build}/prod"
          force="true" />
  </target>

  <target name="-compress" depends="-concatenate">
    <!-- This is a private target -->
    <echo message="Minifying ${dir.build}/discoverui.concat.js with yuicompressor to ${dir.build}/discoverui.min.js" />
    <exec executable="java">
      <arg value="-jar" />
      <arg path="${dir.tools}/${tool.yuicompressor}" />
      <arg path="${dir.build}/discoverui.concat.js" />
      <arg value="-o" />
      <arg path="${dir.build}/discoverui.min.js" />
    </exec>
    <echo message="Minifying ${dir.build}/${file.concat.ajaxListener.name} with yuicompressor to ${dir.build}/${file.min.ajaxListener.name}" />
    <exec executable="java">
      <arg value="-jar" />
      <arg path="${dir.tools}/${tool.yuicompressor}" />
      <arg path="${dir.build}/${file.concat.ajaxListener.name}" />
      <arg value="-o" />
      <arg path="${dir.build}/${file.min.ajaxListener.name}" />
    </exec>
  </target>

  <target name="deploy-test-site">
    <property file="${dir.build.properties}" />
    <var name="browserService" value="${original.browserService}" />

    <tstamp>
      <format property="currentDate"
              pattern="MMddyyyyssssms"
              locale="en,US" />
    </tstamp>


    <property name="build.version"
              value="${build.major.number}.${build.minor.number}.${build.revision.number}" />
    <property name="website.name.temp"
              value="testWebSite_${browserService}_${preprocess.defines}_${build.version}.${currentDate}" />

    <propertyregex property="website.name"
                   input="${website.name.temp}"
                   regexp="\.|,"
                   replace="_"
                   global="true" />
    <echo message="Create test site at ${dir.webserver}/${website.name}" />
    <mkdir dir="${dir.webserver}/${website.name}" />
    <if>
      <and>
        <equals arg1="${jscoverEnabled}" arg2="true" />
        <equals arg1="${preprocess.defines}" arg2="DEBUG" />
      </and>
      <then>
        <java jar="${tool.jscover}" fork="true" spawn="true">
          <arg value="-fs" />
          <arg value="--no-instrument=h5/js/geolocation.js" />
          <arg value="--no-instrument=h5/js/h5demo.js" />
          <arg value="--no-instrument=h5/js/h5utils.js" />
          <arg value="--no-instrument=h5/js/h5utils-offline.js" />
          <arg value="--no-instrument=h5/js/html5.js" />
          <arg value="--no-instrument=h5/html5.js" />
          <arg value="--no-instrument=jquery/jquery-1.7.1.js" />
          <arg value="--no-instrument=jquery/jquery-1.7.1.min.js" />
          <arg value="--no-instrument=jquery/jquery-1.8.1.js" />
          <arg value="--local-storage" />
          <arg value="${dir.test}/webdriver/testWebSite" />
          <arg value="${dir.webserver}/${website.name}" />

        </java>
        <java jar="${tool.jscover}" fork="true" spawn="true">
          <arg value="-ws" />
          <arg value="--document-root=${dir.webserver}/${website.name}" />
          <arg value="--report-dir=${dir.jscoverresults}" />
          <arg value="--port=8095" />
        </java>
        <get src="${tool.jscover.clearstorage}"
             dest="${tool.jscover.clearstoragetext}" />
        <propertyfile file="${dir.build.properties}">
          <entry key="test.website.site"
              value="${hostJSCover}" />
        </propertyfile>
        <echo message="JSCover is enabled." />
      </then>
      <else>
        <!-- Copy over test website-->
        <copy todir="${dir.webserver}/${website.name}"
              includeEmptyDirs="true">
          <fileset dir="${dir.test}/webdriver/testWebSite" />
        </copy>
        <propertyfile file="${dir.build.properties}">
          <entry key="test.website.site"
          value="${testHost}/${website.name}" />
        </propertyfile>
      </else>
    </if>
  </target>

  <target name="deploy-to-site" depends="deploy-test-site">
    <property file="${dir.build.properties}" />
    <var name="browserService" value="${original.browserService}" />

    <antcall target="-concatenate">
      <param name="file.concat.name"
             value="${file.selenium.concat.name}" />
    </antcall>
    <if>
      <equals arg1="${file.hasDefaultConfig}" arg2="true" />
      <then>
        <echo message="${file.defaultConfig} copied to ${dir.intermediate}" />
        <copy file="${file.defaultConfig}"
              todir="${dir.intermediate}"
              force="true" />
        <replaceregexp byline="true"
                       match="hoverTime: \d*"
                       replace="hoverTime: ${hovertime.selenium.test.time}">
          <fileset dir="${dir.intermediate}">
            <include name="${file.defaultConfig}" />
          </fileset>
        </replaceregexp>
        <echo message="Appending ${file.defaultConfig} to previously concatenated files: ${dir.build}/${file.selenium.concat.name} ..." />
        <concat destfile="${dir.build}/${file.selenium.concat.name}"
                append="yes"
                fixlastline="yes">
          <filelist dir="${dir.intermediate}"
                    files="${file.defaultConfig}" />
        </concat>
      </then>
    </if>
    <property name="website.dir.js"
              value="${dir.webserver}/${website.name}/${dir.webapp.js}" />
    <mkdir dir="${website.dir.js}" />
    <echo message="Deploy ${dir.build}/${file.selenium.concat.name} to ${website.dir.js}/${file.concat.copy.name}" />
    <copy file="${dir.build}/${file.selenium.concat.name}"
          tofile="${website.dir.js}/${file.concat.copy.name}"
          force="true" />
  </target>

  <path id="test.class.path">
    <pathelement location="${dir.selenium.test.classes}" />
  </path>

  <target name="junit-clean">
    <delete dir="${dir.intermediate}/webdriver" />
    <delete dir="${dir.testresults}/webdriver_junit_results" />
  </target>

  <target name="junit-prepare">
    <property file="${dir.build.properties}" />
    <mkdir dir="${dir.intermediate}" />
    <mkdir dir="${dir.intermediate}/webdriver" />
    <mkdir dir="${dir.selenium.test.classes}" />
    <mkdir dir="${dir.testresults}/webdriver_junit_results" />

    <osfamily property="os.family" />
    <if>
      <equals arg1="${os.family}" arg2="windows" />
      <then>
        <copy todir="${dir.intermediate}/webdriver"
              includeEmptyDirs="true">
          <fileset dir="${dir.test}/webdriver" />
        </copy>
      </then>
      <else>
        <!-- This helps with issue on mac due to permissions are not copied with ant copy and then drivers do not work. -->
        <!-- You would get java.lang.IllegalStateException: The driver is not executable: for chrome driver-->
        <exec executable="cp" osfamily="mac">
          <arg value="-p" />
          <arg value="-f" />
          <arg value="-R" />
          <arg value="${dir.test}/webdriver" />
          <arg value="${dir.intermediate}" />
        </exec>
      </else>
    </if>

    <replaceregexp byline="true"
                   match="testUrl=(.*)"
                   replace="testUrl=${test.website.site}"
                   file="${dir.intermediate}/webdriver/config.properties" />
    <echo message="Updated property testUrl:${test.website.site}" />
    <replaceregexp byline="true"
                   match="testUrlSuffix=(.*)"
                   replace="testUrlSuffix=${website.name}"
                   file="${dir.intermediate}/webdriver/config.properties" />
    <echo message="Updated property testUrlSuffix:${website.name}" />
    <replaceregexp byline="true"
                   match="browsers=(.*)"
                   replace="browsers=${browsersTemp}"
                   file="${dir.intermediate}/webdriver/config.properties" />
    <echo message="Updated property browsers:${browsersTemp}" />
    <replaceregexp byline="true"
                   match="ieVersion=(.*)"
                   replace="ieVersion=${ieVersion}"
                   file="${dir.intermediate}/webdriver/config.properties" />
    <echo message="Updated property ieVersion:${ieVersion}" />
    <replaceregexp byline="true"
                   match="force32BitMode=(.*)"
                   replace="force32BitMode=${force32BitMode}"
                   file="${dir.intermediate}/webdriver/config.properties" />
    <echo message="Updated property force32BitMode:${force32BitMode}" />
    <replaceregexp byline="true"
                   match="jscoverEnabled=(.*)"
                   replace="jscoverEnabled=${jscoverEnabled}"
                   file="${dir.intermediate}/webdriver/config.properties" />
    <echo message="Updated property jscoverEnabled:${jscoverEnabled}" />
    <replaceregexp byline="true"
                   match="hostJSCover=(.*)"
                   replace="hostJSCover=${hostJSCover}"
                   file="${dir.intermediate}/webdriver/config.properties" />
    <echo message="Updated property hostJSCover:${hostJSCover}" />

    <if>
      <contains string="${browsersTemp}" substring="selendroid" />
      <then>
        <path id="build.class.path">
          <fileset dir="${dir.selendroid.test.libs}">
            <include name="**/*.jar" />
          </fileset>
          <fileset dir="${dir.appium.test.libs}">
            <include name="**/*.jar" />
          </fileset>
        </path>
      </then>
      <else>
        <path id="build.class.path">
          <fileset dir="${dir.selenium.test.libs}">
            <include name="**/*.jar" />
          </fileset>
          <fileset dir="${dir.appium.test.libs}">
            <include name="**/*.jar" />
          </fileset>
        </path>
      </else>
    </if>
  </target>

  <target name="junit-compile"
          depends="deploy-to-site, junit-clean, junit-prepare">
    <javac srcdir="${dir.intermediate}/webdriver/src"
           destdir="${dir.intermediate}/webdriver/classes"
           encoding="ISO-8859-1"
           includeAntRuntime="true">
      <classpath refid="build.class.path" />
    </javac>
  </target>

  <target name="junit-run" depends="junit-compile" />

  <!-- TODO switch to a loop and call junit on each -->
  <target name="junit-tests" depends="junit-compile">
    <junit fork="true"
           printsummary="yes"
           dir="${dir.intermediate}/webdriver">
      <classpath refid="test.class.path" />
      <classpath refid="build.class.path" />
      <formatter type="xml" />
      <formatter type="plain" usefile="false" />
      <test name="com.tl.PageTest1"
            todir="${dir.testresults}/webdriver_junit_results" />
    </junit>

    <junit fork="true"
           printsummary="yes"
           dir="${dir.intermediate}/webdriver">
      <classpath refid="test.class.path" />
      <classpath refid="build.class.path" />
      <formatter type="xml" />
      <formatter type="plain" usefile="false" />
      <test name="com.tl.PrivacyTest"
            todir="${dir.testresults}/webdriver_junit_results" />
    </junit>

    <junit fork="true"
           printsummary="yes"
           dir="${dir.intermediate}/webdriver">
      <classpath refid="test.class.path" />
      <classpath refid="build.class.path" />
      <formatter type="xml" />
      <formatter type="plain" usefile="false" />
      <test name="com.tl.HTML5TestPage"
            todir="${dir.testresults}/webdriver_junit_results" />
    </junit>

    <junit fork="true"
           printsummary="yes"
           dir="${dir.intermediate}/webdriver">
      <classpath refid="test.class.path" />
      <classpath refid="build.class.path" />
      <formatter type="xml" />
      <formatter type="plain" usefile="false" />
      <test name="com.tl.IframeTest"
            todir="${dir.testresults}/webdriver_junit_results" />
    </junit>

    <junit fork="true"
           printsummary="yes"
           dir="${dir.intermediate}/webdriver">
      <classpath refid="test.class.path" />
      <classpath refid="build.class.path" />
      <formatter type="xml" />
      <formatter type="plain" usefile="false" />
      <test name="com.tl.FramesTest"
            todir="${dir.testresults}/webdriver_junit_results" />
    </junit>

    <junit fork="true"
           printsummary="yes"
           dir="${dir.intermediate}/webdriver">
      <classpath refid="test.class.path" />
      <classpath refid="build.class.path" />
      <formatter type="xml" />
      <formatter type="plain" usefile="false" />
      <test name="com.tl.APItest1"
            todir="${dir.testresults}/webdriver_junit_results" />
    </junit>

    <junit fork="true"
           printsummary="yes"
           dir="${dir.intermediate}/webdriver">
      <classpath refid="test.class.path" />
      <classpath refid="build.class.path" />
      <formatter type="xml" />
      <formatter type="plain" usefile="false" />
      <test name="com.tl.ValidateHashchangeEvent"
            todir="${dir.testresults}/webdriver_junit_results" />
    </junit>

    <junit fork="true"
           printsummary="yes"
           dir="${dir.intermediate}/webdriver">
      <classpath refid="test.class.path" />
      <classpath refid="build.class.path" />
      <formatter type="xml" />
      <formatter type="plain" usefile="false" />
      <test name="com.tl.ValidatePrivacyOnH5Controls"
            todir="${dir.testresults}/webdriver_junit_results" />
    </junit>

    <junit fork="true"
           printsummary="yes"
           dir="${dir.intermediate}/webdriver">
      <classpath refid="test.class.path" />
      <classpath refid="build.class.path" />
      <formatter type="xml" />
      <formatter type="plain" usefile="false" />
      <test name="com.tl.ValidatePrivacyOnNonStandardControls"
            todir="${dir.testresults}/webdriver_junit_results" />
    </junit>

    <junit fork="true"
       printsummary="yes"
       dir="${dir.intermediate}/webdriver">
      <classpath refid="test.class.path" />
      <classpath refid="build.class.path" />
      <formatter type="xml" />
      <formatter type="plain" usefile="false" />
      <test name="com.tl.ValidatePrivacyOnSelectControls"
            todir="${dir.testresults}/webdriver_junit_results" />
    </junit>

    <junit fork="true"
           printsummary="yes"
           dir="${dir.intermediate}/webdriver">
      <classpath refid="test.class.path" />
      <classpath refid="build.class.path" />
      <formatter type="xml" />
      <formatter type="plain" usefile="false" />
      <test name="com.tl.ValidateUnloadAsync"
            todir="${dir.testresults}/webdriver_junit_results" />
    </junit>

    <junit fork="true"
           printsummary="yes"
           dir="${dir.intermediate}/webdriver">
      <classpath refid="test.class.path" />
      <classpath refid="build.class.path" />
      <formatter type="xml" />
      <formatter type="plain" usefile="false" />
      <test name="com.tl.ValidateUseCapture"
            todir="${dir.testresults}/webdriver_junit_results" />
    </junit>

    <junit fork="true"
           printsummary="yes"
           dir="${dir.intermediate}/webdriver">
      <classpath refid="test.class.path" />
      <classpath refid="build.class.path" />
      <formatter type="xml" />
      <formatter type="plain" usefile="false" />
      <test name="com.tl.ValidateInactivityTimeout"
            todir="${dir.testresults}/webdriver_junit_results" />
    </junit>
    <junit fork="true"
           printsummary="yes"
           dir="${dir.intermediate}/webdriver">
      <classpath refid="test.class.path" />
      <classpath refid="build.class.path" />
      <formatter type="xml" />
      <formatter type="plain" usefile="false" />
      <test name="com.tl.ValidateCustomEvent"
            todir="${dir.testresults}/webdriver_junit_results" />
    </junit>
    <junit fork="true"
           printsummary="yes"
           dir="${dir.intermediate}/webdriver">
      <classpath refid="test.class.path" />
      <classpath refid="build.class.path" />
      <formatter type="xml" />
      <formatter type="plain" usefile="false" />
      <test name="com.tl.ValidateCustomEventIE"
            todir="${dir.testresults}/webdriver_junit_results" />
    </junit>
  </target>

  <target name="junit-performance-tests" depends="-junit-performance-build">
    <junit fork="true"
           printsummary="yes"
           dir="${dir.intermediate}/webdriver">
      <classpath refid="test.class.path" />
      <classpath refid="build.class.path" />
      <formatter type="xml" />
      <formatter type="plain" usefile="false" />
      <test name="com.tl.performance.PerfTestRunner"
            todir="${dir.testresults}/webdriver_junit_results" />
    </junit>
  </target>

  <target name="-junit-performance-copy"
          description="Copies discoverui.min.js and defaultconfiguration.js to IIS wwwroot/performance."
          depends="junit-compile">
    <mkdir dir="${dir.webserver}/performance" />
    <copy file="${file.defaultConfig}"
          todir="${dir.webserver}/performance"
          force="true" />
    <copy file="${basedir}/build/discoverui.min.js"
          todir="${dir.webserver}/performance"
          force="true" />
  </target>

  <target name="-junit-performance-build"
          description="Concatinate discoverui.min.js and defaultconfiguration.js to discoverui.js"
          depends="-junit-performance-copy">
    <delete file="${dir.webserver}/performance/discoverui.js" />
    <echo message="Concatenating discoverui.min.js and ${file.defaultConfig} to discoverui.js" />
    <concat destfile="${dir.webserver}/performance/discoverui.js" force="yes">
      <filelist dir="${dir.webserver}/performance"
                files="discoverui.min.js,${file.defaultConfig}" />
    </concat>
    <delete file="${dir.webserver}/performance/discoverui.min.js" />
    <delete file="${dir.webserver}/performance/${file.defaultConfig}" />
  </target>

  <target name="JSCover-stop">
    <if>
      <and>
        <equals arg1="${jscoverEnabled}" arg2="true" />
        <equals arg1="${preprocess.defines}" arg2="DEBUG" />
      </and>
      <then>
        <get src="${tool.jscover.stopurl}"
             dest="${tool.jscover.stoptext}" />
        <echo message="JSCover stopped." />
      </then>
      <else>
        <echo message="JSCover was not enabled, doing nothing." />
      </else>
    </if>
  </target>

</project>
